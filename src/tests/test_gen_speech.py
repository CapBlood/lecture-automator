
from lecture_automator.gen_speech.utils import divide_text


def test_divide_text():
    text = (
        'Рассмотрим пример с использованием ООП. Допустим мы хотим написать программу для подсчета яблок в корзинке. '
        'Что нам для этого нужно? Очевидно, что нам нужна корзинка, которая будет иметь некоторое количество яблок. '
        'Для программной имитации корзинки мы напишем класс, который будет описывать корзинку, а именно нам интересна '
        'только одна из характеристик корзинки, то есть количество яблок в ней. Давайте рассмотрим код. Класс в Пайтоне '
        'определяется с помощью ключевого слова "класс", после которого следует название класса, а после название класса '
        'следует двоеточие. В самом классе мы определим специальный метод-инициализатор "инит", в котором создаются поля '
        'данных класса или характеристики, как уже было сказано нас интересует количество яблок, поэтому мы создали в '
        'этом методе поле "нум эпл" и инициализировали его нулем, так как в начале наша корзинка будет содержать ноль яблок. '
        'Также необходимо обратить внимание на аргумент функции под названием "сэлф", он используется для получение значения '
        'поля или для записи нового значения в поле. Также в классе мы определили два метода: "мефат один" и "мефат два". '
        'Первый метод добавляет добавляет в корзинку одно яблоко, а второй достает из него одно яблоко. '
        'Вот таким образом мы и описали нашу будущую корзинку: её свойства или характеристики и функциональность. '
        'Теперь используя этот класс мы можем создавать объекты, то есть сами корзинки, класс же служит лишь их описанием. '
        'Далее мы используем этот класс, чтобы создать корзинку, вызывая имя класса как функцию. Обратите внимание, что '
        'в скобках пусто, мы не передаем никакие аргументы, это связано с тем, что "сэлф" передавать не нужно, а если же '
        'кроме "сэлф" будут другие аргументы, то уже будет необходимо их указывать. Затем мы выводим количество текущих '
        'яблок в созданной корзине, получая к ним доступ через созданный объект и точку, и получаем в выводе ноль. '
        'Затем добавляем с помощью метода одно яблоко и снова выводим - получаем одно яблоко в корзине.'
    )
    expected_split = [
        (
            'Рассмотрим пример с использованием ООП. Допустим мы хотим написать программу для подсчета яблок в корзинке. '
            'Что нам для этого нужно? Очевидно, что нам нужна корзинка, которая будет иметь некоторое количество яблок. '
            'Для программной имитации корзинки мы напишем класс, который будет описывать корзинку, а именно нам интересна '
            'только одна из характеристик корзинки, то есть количество яблок в ней. Давайте рассмотрим код. Класс в Пайтоне '
            'определяется с помощью ключевого слова "класс", после которого следует название класса, а после название класса '
            'следует двоеточие. В самом классе мы определим специальный метод-инициализатор "инит", в котором создаются поля '
            'данных класса или характеристики, как уже было сказано нас интересует количество яблок, поэтому мы создали в '
            'этом методе поле "нум эпл" и инициализировали его нулем, так как в начале наша корзинка будет содержать ноль яблок'
        ),
        (
            'Также необходимо обратить внимание на аргумент функции под названием "сэлф", он используется для получение значения '
            'поля или для записи нового значения в поле. Также в классе мы определили два метода: "мефат один" и "мефат два". '
            'Первый метод добавляет добавляет в корзинку одно яблоко, а второй достает из него одно яблоко. '
            'Вот таким образом мы и описали нашу будущую корзинку: её свойства или характеристики и функциональность. '
            'Теперь используя этот класс мы можем создавать объекты, то есть сами корзинки, класс же служит лишь их описанием. '
            'Далее мы используем этот класс, чтобы создать корзинку, вызывая имя класса как функцию. Обратите внимание, что '
            'в скобках пусто, мы не передаем никакие аргументы, это связано с тем, что "сэлф" передавать не нужно, а если же '
            'кроме "сэлф" будут другие аргументы, то уже будет необходимо их указывать. Затем мы выводим количество текущих '
            'яблок в созданной корзине, получая к ним доступ через созданный объект и точку, и получаем в выводе ноль'
        ),
        (
            'Затем добавляем с помощью метода одно яблоко и снова выводим - получаем одно яблоко в корзине'
        )
    ]

    result = divide_text(text)

    assert result == expected_split


def test_divide_text_2():
    text = (
        'Рассмотрим пример с использованием ООП. Допустим мы хотим написать программу для подсчета яблок в корзинке. '
    )
    expected_split = [
        (
            'Рассмотрим пример с использованием ООП. Допустим мы хотим написать программу для подсчета яблок в корзинке'
        )
    ]

    result = divide_text(text)

    assert result == expected_split
